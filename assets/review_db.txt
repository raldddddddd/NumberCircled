CREATE TABLE roles (
    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    role VARCHAR(50) NOT NULL
);

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    role_id INT NOT NULL,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    profile_image LONGBLOB,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE
);

CREATE TABLE genres (
    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE movies (
    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    release_date INT NOT NULL,
    image_url VARCHAR(255) NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
    last_edited_at DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE movie_genres (
    movie_id INT NOT NULL,
    genre_id INT NOT NULL,
    FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES genres(id) ON DELETE CASCADE
);

CREATE TABLE reviews (
    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    movie_id INT NOT NULL,
    user_id INT NOT NULL,
    comment TEXT NOT NULL,
    rating DECIMAL(2,1) NOT NULL CHECK (rating IN (1.0, 2.0, 3.0, 4.0, 5.0)),
    score DECIMAL(5,4) NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
    last_edited_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL,
    FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE words (
    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    word VARCHAR(100) NOT NULL,
    sentiment ENUM('positive', 'negative') NOT NULL,
    UNIQUE(word, sentiment)
);

CREATE TABLE review_words (
    review_id INT NOT NULL,
    word_id INT NOT NULL,
    frequency INT NOT NULL,
    FOREIGN KEY (review_id) REFERENCES reviews(id) ON DELETE CASCADE,
    FOREIGN KEY (word_id) REFERENCES words(id) ON DELETE CASCADE
);

CREATE TABLE activity_logs (
    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    user_id INT NOT NULL,
    login_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

ALTER TABLE users ADD COLUMN last_edited_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL;
ALTER TABLE activity_logs ADD UNIQUE KEY unique_user_id (user_id);

INSERT INTO roles(role) VALUES
('Super Admin'),
('Admin'),
('User');

---password is 123123123
INSERT INTO users (role_id, first_name, last_name, email, password, profile_image)
VALUES
(1, 'Alice', 'Smith', 'alice@domain.com', '4297f44b13955235245b2497399d7a93', NULL),
(2, 'Bob', 'Johnson', 'bob@domain.com', '4297f44b13955235245b2497399d7a93', NULL),
(3, 'Charlie', 'Brown', 'charlie@domain.com', '4297f44b13955235245b2497399d7a93', NULL);

INSERT INTO genres (name) VALUES
('Action'),
('Comedy'),
('Drama');

INSERT INTO movies (name, description, release_date, image_url)
VALUES
('Edge of Tomorrow', 'Sci-fi action thriller', 2014, 'img/edge.jpg'),
('The Hangover', 'Comedy about a bachelor party gone wrong', 2009, 'img/hangover.jpg'),
('The Godfather', 'Classic mafia drama', 1972, 'img/godfather.jpg');

INSERT INTO movie_genres (movie_id, genre_id) VALUES
(1, 1), -- Edge of Tomorrow → Action
(2, 2), -- The Hangover → Comedy
(3, 3); -- The Godfather → Drama

INSERT INTO reviews (movie_id, user_id, comment, rating, score)
VALUES
(1, 3, 'Amazing action and great effects!', 4.5, 0.09),
(2, 2, 'Very funny and enjoyable', 4.0, 0.06),
(3, 1, 'A timeless classic.', 5.0, 0.08);

INSERT INTO words (word, sentiment) VALUES
('amazing', 'positive'),
('funny', 'positive'),
('classic', 'positive'),
('boring', 'negative'),
('terrible', 'negative');

INSERT INTO review_words (review_id, word_id, frequency) VALUES
(1, 1, 2), -- amazing
(2, 2, 1), -- funny
(3, 3, 1); -- classic

INSERT INTO activity_logs (user_id) VALUES
(1),
(2),
(3);

